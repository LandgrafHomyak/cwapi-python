from asyncio import AbstractEventLoop
from enum import Enum
from typing import ClassVar, TypeVar, Generic, Literal, NoReturn, overload

from .requests import AuthAdditionalOperationRequest, CreateAuthCodeRequest, GetInfoRequest, GrantAdditionalOperationRequest, GrantTokenRequest, GuildInfoRequest, RequestBasicInfoRequest, RequestGearInfoRequest, RequestProfileRequest, RequestStockRequest, ViewCraftbookRequest, WantToBuyRequest, request
from .responses import AuthAdditionalOperationResponse, CreateAuthCodeResponse, GetInfoResponse, GrantAdditionalOperationResponse, GrantTokenResponse, GuildInfoResponse, RequestBasicInfoResponse, RequestGearInfoResponse, RequestProfileResponse, RequestStockResponse, ViewCraftbookResponse, WantToBuyResponse, response

__PROTOCOL = TypeVar("__PROTOCOL", bound=str)
__HOST = TypeVar("__HOST", bound=str)
__PORT = TypeVar("__PORT", bound=int)


class Server(Enum, Generic[__PROTOCOL, __HOST, __PORT]):
    @property
    def protocol(self) -> __PROTOCOL: ...

    @property
    def host(self) -> __HOST: ...

    @property
    def port(self) -> __PORT: ...

    def build_address(self, instance_name: str, password: str) -> str: ...

    Classic: ClassVar[Server[Literal[None], Literal[None], Literal[None]]] = ...
    International: ClassVar[Server[Literal["amqps"], Literal["api.chatwars.me"], Literal[5673]]] = ...
    CW3: ClassVar[Server[Literal["amqps"], Literal["api.chtwrs.com"], Literal[5673]]] = ...


__SERVER = TypeVar("__SERVER", bound=Server)
__INSTANCE_NAME = TypeVar("__INSTANCE_NAME", bound=str)


class ChatWarsApiClient(Generic[__SERVER, __INSTANCE_NAME]):
    @property
    def instance_name(self) -> __INSTANCE_NAME: ...

    @property
    def connection_link(self) -> str: ...

    @property
    def server(self) -> __SERVER: ...

    @property
    def output_exchange_name(self) -> str: ...

    @property
    def input_queue_name(self) -> str: ...

    @property
    def routing_key(self) -> str: ...

    def __new__(cls, server: __SERVER, instance_name: __INSTANCE_NAME, password: str) -> ChatWarsApiClient[__SERVER, __INSTANCE_NAME]: ...

    def connect(self) -> NoReturn: ...

    def disconnect(self) -> NoReturn: ...

    @overload
    def ask(self, req: CreateAuthCodeRequest, /) -> CreateAuthCodeResponse: ...

    @overload
    def ask(self, req: GrantTokenRequest, /) -> GrantTokenResponse: ...

    @overload
    def ask(self, req: AuthAdditionalOperationRequest, /) -> AuthAdditionalOperationResponse: ...

    @overload
    def ask(self, req: GrantAdditionalOperationRequest, /) -> GrantAdditionalOperationResponse: ...

    @overload
    def ask(self, req: GetInfoRequest, /) -> GetInfoResponse: ...

    @overload
    def ask(self, req: ViewCraftbookRequest, /) -> ViewCraftbookResponse: ...

    @overload
    def ask(self, req: RequestProfileRequest, /) -> RequestProfileResponse: ...

    @overload
    def ask(self, req: RequestBasicInfoRequest, /) -> RequestBasicInfoResponse: ...

    @overload
    def ask(self, req: RequestGearInfoRequest, /) -> RequestGearInfoResponse: ...

    @overload
    def ask(self, req: RequestStockRequest, /) -> RequestStockResponse: ...

    @overload
    def ask(self, req: GuildInfoRequest, /) -> GuildInfoResponse: ...

    @overload
    def ask(self, req: WantToBuyRequest, /) -> WantToBuyResponse: ...

    @overload
    def ask(self, req: request, /) -> response: ...

    def __enter__(self) -> ChatWarsApiClient: ...

    def __exit__(self, exc_type, exc_val, exc_tb) -> Literal[False]: ...


class AsyncChatWarsApiClient(ChatWarsApiClient):
    @property
    def loop(self) -> AbstractEventLoop: ...

    def __new__(cls, server: __SERVER, instance_name: __INSTANCE_NAME, password: str, *, loop: AbstractEventLoop = None) -> AsyncChatWarsApiClient[__SERVER, __INSTANCE_NAME]: ...

    async def connect(self) -> NoReturn: ...

    async def disconnect(self) -> NoReturn: ...

    async def __aenter__(self) -> AsyncChatWarsApiClient: ...

    async def __aexit__(self, exc_type, exc_val, exc_tb) -> Literal[False]: ...

    @overload
    async def ask(self, req: CreateAuthCodeRequest, /) -> CreateAuthCodeResponse: ...

    @overload
    async def ask(self, req: GrantTokenRequest, /) -> GrantTokenResponse: ...

    @overload
    async def ask(self, req: AuthAdditionalOperationRequest, /) -> AuthAdditionalOperationResponse: ...

    @overload
    async def ask(self, req: GrantAdditionalOperationRequest, /) -> GrantAdditionalOperationResponse: ...

    @overload
    async def ask(self, req: GetInfoRequest, /) -> GetInfoResponse: ...

    @overload
    async def ask(self, req: ViewCraftbookRequest, /) -> ViewCraftbookResponse: ...

    @overload
    async def ask(self, req: RequestProfileRequest, /) -> RequestProfileResponse: ...

    @overload
    async def ask(self, req: RequestBasicInfoRequest, /) -> RequestBasicInfoResponse: ...

    @overload
    async def ask(self, req: RequestGearInfoRequest, /) -> RequestGearInfoResponse: ...

    @overload
    async def ask(self, req: RequestStockRequest, /) -> RequestStockResponse: ...

    @overload
    async def ask(self, req: GuildInfoRequest, /) -> GuildInfoResponse: ...

    @overload
    async def ask(self, req: WantToBuyRequest, /) -> WantToBuyResponse: ...

    @overload
    async def ask(self, req: request, /) -> response: ...
