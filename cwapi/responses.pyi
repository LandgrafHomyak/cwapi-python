from abc import abstractmethod
from typing import Iterable, final, NoReturn, Optional, Literal, overload, Union

from cwapi.types import _GuildStock, Action, Castle, Gear, GearSet, Guild, GuildRolesSet, Operation, Class, RecipeBook, SecondaryClass, Status, Stock, StockCell


@final
class response:
    def __bool__(self) -> Literal[True]: ...

    @abstractmethod
    def dump(self) -> bytes: ...


@final
class response_error(Exception, response):
    def __bool__(self) -> Literal[False]: ...

    @abstractmethod
    def dump(self) -> bytes: ...


@final
class CreateAuthCodeResponse(response):
    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    def __new__(cls, userId: int) -> CreateAuthCodeResponse: ...


@final
class GrantTokenResponse(response):
    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    @property
    def id(self) -> str: ...

    @id.setter
    def id(self, value: str) -> NoReturn: ...

    @property
    def token(self) -> str: ...

    @token.setter
    def token(self, value: str) -> NoReturn: ...

    def __new__(cls, userId: int, id: str, token: str) -> CreateAuthCodeResponse: ...


@final
class AuthAdditionalOperationResponse(response):
    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    @property
    def operation(self) -> Operation: ...

    @operation.setter
    def operation(self, value: str) -> Operation: ...

    @property
    def requestId(self) -> str: ...

    @requestId.setter
    def requestId(self, value: str) -> str: ...

    def __new__(cls, userId: int, operation: Operation, requestId: str) -> AuthAdditionalOperationResponse: ...


@final
class GrantAdditionalOperationResponse(response):
    @property
    def requestId(self) -> str: ...

    @requestId.setter
    def requestId(self, value: str) -> NoReturn: ...

    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    def __new__(cls, userId: int, requestId: str) -> GrantAdditionalOperationResponse: ...


@final
class GetInfoResponse(response):
    @property
    def balance(self) -> int: ...

    @balance.setter
    def balance(self, value: int) -> NoReturn: ...

    def __new__(cls, balance: int) -> GetInfoResponse: ...


@final
class ViewCraftbookResponse(response):
    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    @property
    def craft(self) -> Optional[RecipeBook]: ...

    @craft.setter
    def craft(self, value: RecipeBook) -> NoReturn: ...

    @craft.deleter
    def craft(self) -> NoReturn: ...

    @property
    def alchemy(self) -> Optional[RecipeBook]: ...

    @alchemy.setter
    def alchemy(self, value: RecipeBook) -> NoReturn: ...

    @alchemy.deleter
    def alchemy(self) -> NoReturn: ...

    def __new__(cls, userId: int, craft: Optional[str], alchemy: Optional[str]) -> ViewCraftbookResponse: ...


@final
class RequestBasicInfoResponse(response):
    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    @property
    def class_(self) -> Class: ...

    @class_.setter
    def class_(self, value: Class) -> NoReturn: ...

    @property
    def atk(self) -> int: ...

    @atk.setter
    def atk(self, value: int) -> NoReturn: ...

    @property
    def def_(self) -> int: ...

    @def_.setter
    def def_(self, value: int) -> NoReturn: ...

    def __new__(cls, userId: int, class_: Class, atk: int, def_: int) -> RequestBasicInfoResponse: ...


@final
class RequestProfileResponse(RequestBasicInfoResponse):
    @property
    def castle(self) -> Castle: ...

    @castle.setter
    def castle(self, value: Castle) -> NoReturn: ...

    @property
    def secondaryClass(self) -> Optional[SecondaryClass]: ...

    @secondaryClass.setter
    def secondaryClass(self, value: SecondaryClass) -> NoReturn: ...

    @secondaryClass.deleter
    def secondaryClass(self) -> NoReturn: ...

    @property
    def hp(self) -> int: ...

    @hp.setter
    def hp(self, value: int) -> NoReturn: ...

    @property
    def maxHp(self) -> int: ...

    @maxHp.setter
    def maxHp(self, value: int) -> NoReturn: ...

    @property
    def exp(self) -> int: ...

    @exp.setter
    def exp(self, value: int) -> NoReturn: ...

    @property
    def gold(self) -> int: ...

    @gold.setter
    def gold(self, value: int) -> NoReturn: ...

    @property
    def guild(self) -> Optional[Guild]: ...

    @guild.setter
    def guild(self, value: Guild) -> NoReturn: ...

    @guild.deleter
    def guild(self) -> NoReturn: ...

    @property
    def lvl(self) -> int: ...

    @lvl.setter
    def lvl(self, value: int) -> NoReturn: ...

    @property
    def status(self) -> Status: ...

    @status.setter
    def status(self, value: int) -> NoReturn: ...

    @property
    def action(self) -> Action: ...

    @action.setter
    def action(self, value: Action) -> NoReturn: ...

    @property
    def mana(self) -> int: ...

    @mana.setter
    def mana(self, value: int) -> NoReturn: ...

    @property
    def pouches(self) -> int: ...

    @pouches.setter
    def pouches(self, value: int) -> NoReturn: ...

    @property
    def stamina(self) -> int: ...

    @stamina.setter
    def stamina(self, value: int) -> NoReturn: ...

    @property
    def userName(self) -> str: ...

    @userName.setter
    def userName(self, value: str) -> NoReturn: ...

    def __new__(cls, userId: int, class_: Class, atk: int, def_: int, castle: Castle, secondaryClass: Optional[SecondaryClass], hp: int, maxHp: int, exp: int, gold: int, guild: Optional[Guild], lvl: int, status: Status, action: Action, mana: int, pouches: int, stamina: int, userName: str) -> RequestProfileResponse: ...


@final
class RequestGearInfoResponse(GearSet):
    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    def __new__(cls, userId: int, *, weapon: Gear = ..., offhand: Gear = ..., head: Gear = ..., body: Gear = ..., hands: Gear = ..., feet: Gear = ..., coat: Gear = ..., amulet: Gear = ..., ring: Gear = ...) -> RequestGearInfoResponse: ...

    def set(self) -> GearSet: ...


@final
class WantToBuyResponse(response):
    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    @property
    def itemName(self) -> str: ...

    @itemName.setter
    def itemName(self, value: str) -> NoReturn: ...

    @property
    def quantity(self) -> int: ...

    @quantity.setter
    def quantity(self, value: int) -> NoReturn: ...

    def __new__(cls, userId: int, itemName: str, quantity: int) -> WantToBuyResponse: ...


@final
class RequestStockResponse(Stock):
    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    @property
    def stockSize(self) -> int: ...

    @stockSize.setter
    def stockSize(self, value: int) -> NoReturn: ...

    @property
    def stockLimit(self) -> int: ...

    @stockLimit.setter
    def stockLimit(self, value: int) -> NoReturn: ...

    @overload
    def __new__(cls, userId: int, stockSize: int, stockLimit: int, *args: StockCell) -> RequestStockResponse: ...

    @overload
    def __new__(cls, iterable: Iterable[StockCell], /, userId: int, stockSize: int, stockLimit: int, ) -> RequestStockResponse: ...


@final
class GuildInfoResponse(Stock):
    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    @property
    def tag(self) -> Optional[str]: ...

    @tag.setter
    def tag(self, value: str) -> NoReturn: ...

    @tag.deleter
    def tag(self) -> NoReturn: ...

    @property
    def level(self) -> int: ...

    @level.setter
    def level(self, value: int) -> NoReturn: ...

    @property
    def castle(self) -> Castle: ...

    @castle.setter
    def castle(self, value: Castle) -> NoReturn: ...

    @property
    def emoji(self) -> Optional[str]: ...

    @emoji.setter
    def emoji(self, value: str) -> NoReturn: ...

    @emoji.deleter
    def emoji(self) -> NoReturn: ...

    @property
    def glory(self) -> int: ...

    @glory.setter
    def glory(self, value: int) -> NoReturn: ...

    @property
    def members(self) -> int: ...

    @members.setter
    def members(self, value: int) -> NoReturn: ...

    @property
    def name(self) -> str: ...

    @name.setter
    def name(self, value: str) -> NoReturn: ...

    @property
    def lobby(self) -> Optional[str]: ...

    @lobby.setter
    def lobby(self, value: str) -> NoReturn: ...

    @lobby.deleter
    def lobby(self) -> NoReturn: ...

    @property
    def stock(self) -> _GuildStock: ...

    @stock.setter
    def stock(self, value: _GuildStock) -> NoReturn: ...

    @property
    def repair(self) -> bool: ...

    @repair.setter
    def repair(self, value: bool) -> NoReturn: ...

    @property
    def roles(self) -> GuildRolesSet: ...

    @roles.setter
    def roles(self, value: GuildRolesSet) -> NoReturn: ...

    def __new__(cls, userId: int, tag: Optional[str], level: int, castle: Castle, emoji: Optional[str], glory: int, members: int, name: str, lobby: Optional[str], stock: _GuildStock, repair: bool, roles: GuildRolesSet) -> RequestStockResponse: ...


class ApiException(response_error):
    @property
    def raw(self) -> str: ...

    def __new__(cls, raw) -> ApiException: ...

    def __init__(self, raw) -> NoReturn: ...

    def parse(self) -> Union[str, bool, list, dict, int, float, Literal[None]]: ...


@final
class BadFormatError(response_error):
    def __new__(cls) -> BadFormatError: ...

    def __init__(self) -> NoReturn: ...


@final
class NoSuchUserError(response_error):
    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    def __new__(cls, userId: int) -> NoSuchUserError: ...

    def __init__(self, userId: int) -> NoReturn: ...


@final
class InvalidTokenError(response_error):
    @property
    def token(self) -> str: ...

    @token.setter
    def token(self, value: str) -> NoReturn: ...

    def __new__(cls, token: str) -> NoSuchUserError: ...

    def __init__(self, token: str) -> NoReturn: ...


@final
class InvalidCodeError(response_error):
    def __new__(cls) -> InvalidCodeError: ...

    def __init__(self) -> NoReturn: ...


@final
class ForbiddenError(response_error):
    @property
    def action(self) -> str: ...

    @action.setter
    def action(self, value: str) -> NoReturn: ...

    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    @property
    def requiredOperation(self) -> Operation: ...

    @requiredOperation.setter
    def requiredOperation(self, value: Operation) -> NoReturn: ...

    def __new__(cls, action: str, userId: int, requiredOperation: Operation) -> ForbiddenError: ...


@final
class NotInGuildError(response_error):
    def __new__(cls) -> NotInGuildError: ...

    def __init__(self) -> NoReturn: ...


@final
class LevelIsLowError(response_error):
    @property
    def action(self) -> str: ...

    @action.setter
    def action(self, value: str) -> NoReturn: ...

    @property
    def userId(self) -> int: ...

    @userId.setter
    def userId(self, value: int) -> NoReturn: ...

    def __new__(cls, action: str, userId: int) -> LevelIsLowError: ...


def parse_response(b: bytes, /) -> response: ...
